{"version":3,"sources":["Components/Item.js","Components/GroceryList.js","Components/NewItem.js","App.js","serviceWorker.js","index.js"],"names":["styles","item","cursor","bought","textDecoration","Item","_ref","id","name","quantity","buy","react_default","a","createElement","onClick","style","Object","objectSpread","GroceryList","items","Fragment","className","map","Components_Item","assign","key","NewItem","state","updateItem","e","_this","setState","target","value","updateQuantity","handleSubmit","preventDefault","props","add","_this$state","this","onSubmit","placeholder","required","onChange","type","max","min","pattern","React","Component","App","maxItems","getUniqId","Math","floor","random","toString","substring","addItem","length","concat","toConsumableArray","console","log","boughtItem","Components_NewItem","Components_GroceryList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7f6d57f.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Item = ({id, name, quantity, bought, buy}) => (\n    <li onClick={() => buy(id)} style={bought ? { ...styles.item, ...styles.bought } : styles.item }>\n        <p>{name} ({ quantity })</p>\n    </li>\n)\n\nconst styles = {\n    item: {cursor: 'pointer'},\n    bought: {textDecoration: 'line-through'}\n}\n\nexport default Item;","import React from 'react';\nimport '../Styles/GroceryList.scss';\nimport Item from '../Components/Item';\n\nconst GroceryList = ({items, bought}) => (\n    <>\n        <h1>Grocery List</h1>\n        <div className=\"writing-container\">\n            <ul className=\"writing-lines\">\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n                <li></li>\n            </ul>\n            <ul>\n                { items.map( item => <Item buy={bought} key={item.id} {...item}/> )}\n            </ul>\n        </div>\n        \n    </>\n)\n\nexport default GroceryList;","import React from 'react';\nimport '../Styles/NewItem.scss';\n\n\nclass NewItem extends React.Component {\n    state = { \n        name: '',\n        quantity: 0\n    }\n\n    updateItem = (e) => {\n        this.setState({\n            name: e.target.value\n        });\n    }\n    updateQuantity = (e) => {\n        this.setState({\n            quantity: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.add(this.state.name, this.state.quantity);\n        this.setState({ name: '', quantity: 0 })\n    }\n\n    render() {\n        const { name, quantity } = this.state;\n        return(\n            <form onSubmit={this.handleSubmit} className=\"new-item\">\n                <input \n                    value= {name}\n                    placeholder = \"Add Item:\"\n                    required\n                    onChange = {this.updateItem}\n                    name=\"name\" \n                />\n                <input\n                    type=\"number\"\n                    max= \"100\"\n                    min= \"1\"\n                    value={quantity}\n                    placeholder = \"Quantity:\"\n                    required\n                    pattern =\"[0-9]+\"\n                    onChange={this.updateQuantity}\n                    name=\"quantity\"\n                />\n                <input\n                    value=\"Add Item\"\n                    type=\"submit\"\n                />\n            </form>\n        );\n    }\n}\n\nexport default NewItem;","import React, { Component } from 'react';\nimport GroceryList from './Components/GroceryList';\nimport NewItem from './Components/NewItem';\nimport './Styles/App.scss';\n\nclass App extends Component {\n  state = {\n    maxItems: 21,\n    items: [\n      {id: 1, name: \"Oranges\", quantity: \"5\", bought: false},\n      {id: 2, name: \"Bread\", quantity: \"1\", bought: false},\n      {id: 3, name: \"Advocado\", quantity: \"2\", bought: false},\n      {id: 4, name: \"Salmon Filets\", quantity: \"2\", bought: false},\n      {id: 5, name:  \"Eggs\", quantity: \"20\", bought: false},\n      {id: 6, name:  \"Cilantro\", quantity: \"1\", bought: false},\n\n    ]\n  }\n\n  getUniqId = () => {\n    return Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n  }\n\n  addItem= (name, quantity) => {\n    const item = { name, id: this.getUniqId(), quantity, bought: false};\n    if(this.state.items.length < this.state.maxItems) {\n      this.setState({\n        items: [item, ...this.state.items]\n      }, function () {\n        console.log(this.state);\n      });\n    }\n  }\n\n  boughtItem = (id) => {\n    const { items } = this.state;\n    this.setState({\n      items: items.map( item => {\n        if(item.id === id) {\n          return {\n            ...item, bought: !item.bought\n          }\n        }\n        return item\n      })\n    })\n  }\n\n  render() {\n    const { items } = this.state;\n    return (\n      <div className=\"App\">\n          <NewItem add={this.addItem}/>\n          <div className=\"notepad\">\n            <div className=\"hole\"></div>\n            <div className=\"hole\"></div>\n            <div className=\"hole\"></div>\n            <div className=\"lines\"></div>\n            <GroceryList items={items} bought={this.boughtItem}/>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}